{"version":3,"sources":["components/AddBooks.js","components/SearchBooks.js","components/BookList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddBooks","react_default","a","createElement","Component","SearchBooks","BookList","className","this","props","books","map","item","key","bookId","fa","bookName","dist_default","date","releaseDate","parse","format","author","notes","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","myBooks","lastIndex","_this2","fetch","then","response","json","result","setState","id","components_SearchBooks","components_AddBooks","components_BookList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQAUeA,0LANP,OACIC,EAAAC,EAAAC,cAAA,+BAHWC,cCSRC,yLANP,OACIJ,EAAAC,EAAAC,cAAA,kCAHcC,+CCwCXE,mLAnCP,OACAL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,mCACZC,KAAKC,MAAMC,MAAMC,IAAI,SAAAC,GAAI,OACxBX,EAAAC,EAAAC,cAAA,OAAKI,UAAU,0BAA0BM,IAAKD,EAAKE,QACjDb,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QACbN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,oCAChBN,EAAAC,EAAAC,cAACY,EAAA,EAAD,QAIJd,EAAAC,EAAAC,cAAA,OAAKI,UAAU,uBACbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,mBACbN,EAAAC,EAAAC,cAAA,QAAMI,UAAU,YAAYK,EAAKI,UACjCf,EAAAC,EAAAC,cAAA,QAAMI,UAAU,oBACdN,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACEgB,KAAMN,EAAKO,YACXC,MAAM,mBACNC,OAAO,kBAKbpB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,cACbN,EAAAC,EAAAC,cAAA,QAAMI,UAAU,cAAhB,YACAN,EAAAC,EAAAC,cAAA,YAAOS,EAAKU,SAEdrB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aAAaK,EAAKW,mBA5B1BnB,aC6CRoB,cA5Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,QACKuB,MAAQ,CACXC,QAAU,GACVC,UAAW,GAJDR,mFAQK,IAAAS,EAAA1B,KAClB2B,MAAM,eACJC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJ,IAAM7B,EAAQ6B,EAAO5B,IAAI,SAAAC,GAKvB,OAJAA,EAAKE,OAASoB,EAAKH,MAAME,UACzBC,EAAKM,SAAS,CACZP,UAAWC,EAAKH,MAAME,UAAU,IAE3BrB,IAETsB,EAAKM,SAAS,CACZR,QAAStB,uCAMb,OACET,EAAAC,EAAAC,cAAA,QAAMI,UAAU,gBAAgBkC,GAAG,cACjCxC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,sBACbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACbN,EAAAC,EAAAC,cAACuC,EAAD,MACAzC,EAAAC,EAAAC,cAACwC,EAAD,MACA1C,EAAAC,EAAAC,cAACyC,EAAD,CAAUlC,MAAOF,KAAKuB,MAAMC,sBAnC1B5B,aCMEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECRNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.6aa93c67.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass AddBooks extends Component {\r\n    render() {\r\n        return (\r\n            <div>Add Books</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddBooks","import { extend } from 'jquery'\r\nimport React, { Component } from 'react'\r\n\r\nclass SearchBooks extends Component {\r\n    render() {\r\n        return (\r\n            <div>Search Books</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBooks","import { extend } from 'jquery';\r\nimport { fromPairs } from 'lodash';\r\nimport React, { Component } from 'react';\r\nimport { FaTimes } from 'react-icons/fa';\r\nimport Moment from 'react-moment';\r\n\r\nclass BookList extends Component {\r\n    render() {      \r\n        return (\r\n        <div className=\"appointment-list item-list mb-3\">\r\n          {this.props.books.map(item => (\r\n            <div className=\"pet-item col media py-3\" key={item.bookId}>\r\n              <div className=\"mr-3\">\r\n                <button className=\"pet-delete btn btn-sm btn-danger\">\r\n                  <FaTimes />\r\n                </button>\r\n              </div>\r\n  \r\n              <div className=\"pet-info media-body\">\r\n                <div className=\"pet-head d-flex\">\r\n                  <span className=\"pet-name\">{item.bookName}</span>\r\n                  <span className=\"apt-date ml-auto\">\r\n                    <Moment \r\n                      date={item.releaseDate}\r\n                      parse=\"YYYY-MM-DD HH:MM\"\r\n                      format=\"MMM-D h:mma\"\r\n                    />\r\n                  </span>\r\n                </div>\r\n  \r\n                <div className=\"owner-name\">\r\n                  <span className=\"label-item\">Author: </span>\r\n                  <span>{item.author}</span>\r\n                </div>\r\n                <div className=\"apt-notes\">{item.notes}</div>\r\n              </div>\r\n            </div> \r\n          ))}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BookList","import React, { Component } from 'react';\nimport '../css/App.css';\nimport AddBooks from '../components/AddBooks';\nimport SearchBooks from '../components/SearchBooks';\nimport BookList from '../components/BookList';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      myBooks : [],\n      lastIndex: 0\n    };\n  }\n\n componentDidMount() {\n   fetch('./data.json')\n    .then(response => response.json())\n    .then(result => {\n      const books = result.map(item => {\n        item.bookId = this.state.lastIndex; \n        this.setState({\n          lastIndex: this.state.lastIndex+1\n        });\n        return item;\n      })\n      this.setState({\n        myBooks: books\n      });\n    });\n }\n\n  render() {\n    return (\n      <main className=\"page bg-white\" id=\"petratings\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-12 bg-white\">\n              <div className=\"container\">\n                <SearchBooks />\n                <AddBooks />\n                <BookList books={this.state.myBooks}/>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'jquery/dist/jquery.js';\nimport 'popper.js/dist/umd/popper.js';\nimport 'bootstrap/dist/js/bootstrap.js';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}